✅ FUNCIONA:
❌ BASH_ERROR:
❌ SINTAX_ERROR
🔹
✔
🔸
✒
//minishell_loop()
//    ↓
//    (Leer línea, tokenizar, vars, here)
//    ↓
//execute_command(all, program, prompt)
//    ├─ Si `count_pipe(all->tokens) == 0` (comando único):
//   │   ├─ Si `is_builtin(comando_principal)`:
//    │   │   ├─ (Aplicar redirecciones de archivo en el padre)
//    │   │   └─ exec_builtin (en el proceso padre)
//    │   └─ Si comando externo:
//    │       ├─ fork_and_execute_single_cmd (crea un hijo)
//    │       │   ├─ (En el hijo):
//    │       │   │   ├─ (Aplicar redirecciones de archivo)
//    │       │   │   └─ execve
//    │       │   └─ (En el padre):
//    │       │       └─ waitpid
//    └─ Si `count_pipe(all->tokens) > 0` (pipeline):
//        ├─ setup_pipes (crea todos los pipes en el padre)
//        ├─ Bucle: por cada comando en el pipeline:
//        │   ├─ fork (crea un hijo)
//        │   │   ├─ (En el hijo):
//        │   │   │   ├─ setup_redirects (pipes)
//        │   │   │   ├─ apply_redirections (archivos)
//        │   │   │   ├─ Si `is_builtin(comando_hijo)`:
//        │   │   │   │   └─ exec_builtin
//        │   │   │   └─ Si comando externo:
//        │   │   │       └─ execve
//        │   │   └─ (En el padre):
//        │   │       └─ (Cerrar FDs de pipe usados por este hijo)
//        ├─ close_fds (cerrar todos los pipes restantes en el padre)
//        └─ wait_for_children (esperar a todos los hijos)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

codigo fuente de shell: https://github.com/JMDTol/bash/blob/master/shell.c#L365

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

pasos tokenizacion:

La tokenización en Bash es el primer paso que realiza el shell al procesar un comando. 
Se encarga de dividir la línea de entrada en unidades llamadas tokens, que luego se interpretarán como palabras clave, nombres de comandos, argumentos, operadores, etc.

⭐ 0. Patron de prioridades a la hora de analizar la linea de comandos:
	🔸 1. separadores: &&, ||, |, &, '\0', '\n' etc. 
	🔸 2. redirecciones <, <<, >, >>, etc.
		2.0 redirecciones numeradas deberan llevar espacio para separarlos en la linea de comando, sino bash ira a separarlo por <<, >>, < o >.
		2.1 '#' debera estar al principio de linea o llevar espacio para que bash lo reconozca como caracter de anotar la linea. 
	🔸 3. comillas 
	🔸 4. espacios 

	❌ tokenizacion "comillas - espacios" va muy junto. 
	❌ ojo con estos casos. Combinamos tokenizacion de espacios y comillas:
		→ echo hola mundo 					→ hola mundo
		→ echo hola mundo ls 				→ hola mundo ls
		→ echo "hola" "mundo" 				→ hola mundo
		→ echo "hola" "mundo" ls			→ hola mundo ls
		→ echo "hola" "mundo" && ls 		→ (hasta que no encuentra separador no para de meter los datos como argumentos)
		→ echo "hola""mundo"&& ls			→ holamundo + ls command (&& para separar ls, y al no haber espacios como separador las comillas se quitan y tenemos un token sin espacios: holamundo )
	
	🔹 comandos que se comportan como echo: echo, printf, ls, rm, cp, mv, kill, ps, grep, find, awk, sed, chmod, chown, ping, curl, 
	🔹 comandos que se comportan como ls:
		✅ Comandos de salida de texto:
		→ echo → Muestra todos los argumentos concatenados con espacios.
			→ echo hola mundo de unicornios 
		→ printf → Similar a echo, pero con más control de formato
			→ printf "%s\n" hola mundo ls
		✅ Comandos de manipulación de archivos y directorios
		→ ls → Lista múltiples archivos o directorios dados como argumento
			→ ls archivo1 archivo2 carpeta1
		→ cat → Imprime el contenido de múltiples archivos
			→ cat archivo1 archivo2
		→ rm → Borra múltiples archivos
			→ rm archivo1 archivo2
		→ cp → Copia múltiples archivos a un destino
			→ cp archivo1 archivo2 carpeta_destino/
		→ mv → Mueve múltiples archivos a otro directorio
			→ mv archivo1 archivo2 carpeta_destino/
		✅ Comandos de procesos
		→ kill → Acepta múltiples PIDs a la vez
			→ kill 1234 5678
		→ ps → Puede recibir múltiples opciones como argumentos
			→ ps aux
		✅ Comandos de búsqueda y filtrado
		→ grep → Puede recibir múltiples patrones o archivos
			→ grep "texto" archivo1 archivo2
		→ find → Puede recibir múltiples directorios y opciones
			→ find carpeta1 carpeta2 -name "*.txt"
		→ awk → Interpreta múltiples argumentos como parte del script.
			→ awk '{print $1, $2}' archivo
		→ sed → Similar a awk, acepta múltiples argumentos hasta un separador.
			→ sed 's/foo/bar/g' archivo
		✅ Comandos de control de usuarios y permisos
		→ chmod → Cambia permisos a múltiples archivos.
			→ chmod 644 archivo1 archivo2
		→ chown → Cambia dueño de múltiples archivos.
			→ chown usuario:grupo archivo1 archivo2
		✅ Comandos de redes y conexión
		→ ping → Puede recibir múltiples argumentos antes de un separador
			→ ping -c 4 google.com
		→ curl → Acepta múltiples opciones hasta que encuentra un separador
			→ curl -o archivo.txt https://example.com

⭐ 1. Proceso de Tokenización en Bash:

	🔸 0. → linea vacia: <espacio><espacio><ENTER> → No hay tokens, así que no hay comando. Bash simplemente muestra un nuevo prompt sin ejecutar nada.
		// ✒ esto debe ir al historial
	🔸 0. → <ENTER> → No hay tokens, así que no hay comando. Bash simplemente muestra un nuevo prompt sin ejecutar nada.
		// ❌ esto no va al historial
	🔸 0. Eliminación de espacios en blanco iniciales y finales. Preparamos 'line' para seguir. El shell ignora espacios, tabs y nuevas líneas al principio y al final del comando. Esto no afecta a la tokenización directamente, pero sí prepara el comando para que sea procesado correctamente. -> revisar f ()-> char *get_line(void);
	🔸 0. "" y '' → se tokeniza y da ❌ BASH_ERROR: Command '' not found. 
	🔸 0. ❌ SINTAX_ERROR
		1. var con caracteres prohibidos	
		2. delimitadores prohibidos sin comillas
		3. comillas abiertas. ver casos bien
		4. <<< (fase 2)
	🔸 1. Expansión de Alias: revisar casos 🤯
			1. alias ll='ls -l' 		-> (❌ SINTAX_ERROR) 								-> tokenizmos con espacios alias
			2. aliasll='ls'				-> (❌ SINTAX_ERROR) 								-> tokenizmos sin espacios alias
			3. aliasll ='ls'			-> ❌ BASH_ERROR: aliasll: command not found			-> tokeniza aliasll como command
			4. aliasll= 'ls'			-> ejecuta ls y registra ll						 	 -> tokeniza alias ll y ejecuta ls como token independiente

	🔸 2.0 ver si hay o no comillas:
		1. NO HAY COMILLAS (❌ ft_split da error en este caso, escribir f() nueva de parceo).
			1. primer token comando: (Todo lo que sigue después del comando se considera argumento, hasta que aparezca un separador (|, ;, &&, ||, etc.)). 
			ejemplos de comandos + argumentoS sin comillas (los argumentos no se limitan con espacio o comillas, sino con delimitadores): echo, printf, ls carpeta1 carpeta2, cat archivo1 archivo2, rm archivo1 archivo2, tar -cvf archivo.tar carpeta1 carpeta2, etc. 
				1. tokenizamos siguiendo patron de prioridades ver PTO. 2
			2. primer token redireccion:
				1. ver PTO.2 
		3. SI HAY COMILLAS CERRADAS -> ✅ SEGUIMOS con el pto 2, tokenizamos con espacios y comillas, siguiendo los patrones de prioridades


	🔸 2. División en palabras según reglas de delimitación: espacios o/y comillas. 
	Espacios y comillas: Los espacios separan los tokens, y las comillas permiten que se mantenga una cadena con espacios como un solo argumento. 
	A veces las comillas se quitan tokenizando como comando y no como argumento: "ls"|"wc" "-l" o "ls. Ver reglas tokenizacion con comillas mas adelante. 

		"ls"|"wc" "-l" 					✅ FUNCIONA:
		ls "-l -1"						❌ BASH_ERROR: ls: invalid option -- ' '
		"ls""-l""-1"|"wc""-l" 			→ si el comando no es valido: ls-l-1: command not found + wc-l: command not found

		1. Espacios como delimitadores: Separan los tokens.
		2. Comillas como delimitadores: 
		📛 REGLAS DE TOKENIZACION CON COMILLAS 📛
			
			✔  El primer token después de la tokenización que NO sea una redirección/here_doc (>, <, >>, <<, etc.) es tratado como el comando.
				→ hay comandos que por como estan diseñadas no necesitan redireccion, pero con redireccion tambien van a fucnionar:
					cat  →  	cat archivo.txt  				→  cat < archivo.txt
					sort  → 	sort archivo.txt  				→  sort < archivo.txt
					grep  → 	grep palabra archivo.txt  		→  grep palabra < archivo.txt
					awk  →  	awk '{print $1}' archivo.txt  	→  awk '{print $1}' < archivo.txt
					sed  →  	sed 's/foo/bar/' archivo.txt  	→  sed 's/foo/bar/' < archivo.txt
					wc  →  		wc archivo.txt  				→  wc < archivo.txt
					uniq  →  	uniq archivo.txt  				→  uniq < archivo.txt
					head  →  	head archivo.txt  				→  head < archivo.txt
					tail  →  	tail archivo.txt 				→  tail < archivo.txt
				→ si primer token es una redirección de tipo <: patron "command + redireccion + path_name"
					→ < archivo.txt 	→ No hay un comando que consuma la entrada, así que simplemente Bash abre y cierra el archivo sin hacer nada.

				→ si primer token es una redirección de tipo >: patron "command + redireccion + path_name" o patron "redireccion + path_name"
					> test.txt echo hola
					> test.txt

				→ si primer token es here_string o here_doc:
					→ cuidado a la hora de tokenizar las redirecciones: a veces van sin espacio y valen
					→ << DELIMITER 		→ ✅ gestionar minishell
					→ <<, <, >, >> 		→ ❌ BASH_ERROR: bash: syntax error near unexpected token `newline' (falta DELIMITER en el patron: << DELIMITER)
					→ <<<  				→ ❌ SINTAX_ERROR (no gestionamos here_string en minishell)
					→ << .. y << . y 	→ ❌ SINTAX_ERROR (como comillas abiertas)
					→ <<.. y <<. 	 	→ ❌ BASH_ERROR: bash: ..: Is a directory (. y .. se tokeniza como path_name)
					→ <<<< ...  		→ ❌ BASH_ERROR: -bash: syntax error near unexpected token `<<<' (<<< < no sigu el patron de < path_name)
					→ << LIMITER	
						✅	<< LIMITER y << "LIMITER"
				→ si primer token es command pero ademas le sigue here_string o here_doc: primero se ejecuta << DELIMITER y luego command + arg. puede ser command + arg o command + << DELIMITER + arg (los arg de command siguen la regla de separador)
					→ command + << LIMITER	
						✅	ls << LIMITER	
					→ command + argument/s + << LIMITER
						✅ 	ls -l << LIMITER
					→ command + << LIMITER + argument/s (hasta separador)
						✅ 	ls << LIMITER -l
						❌ 	ls << LIMITER echo hola
							❌ BASH_ERROR:
							ls: cannot access 'echo': No such file or directory
							ls: cannot access 'hola': No such file or directory 
					→ dobles heredoc' y sus combinaciones:  << LIMITER << LIMITER2

				→ Comillas solas sin un comando válido: el comando dentro de comillas no es valido →  ❌ BASH_ERROR
					→ ""
					→ ''
					→ " "
					→ ' '
				→ Solo operadores sin comando válido antes del separador/pipe. no encuentra el comando antes del separador →  ❌ BASH_ERROR
					→ |
					→ && echo hola
				→ si el comando es valido + "algo con comillas sin espacios" 	-> entre comillas siempre ira el argumento/s( variabes con extencion, agrumento de echo, path_naeme, etc. )
				→ si el comando no es valido					-> entre comillas se revisa como comando, quitando las comillas. Ver caso de comillas + espacios, a continuación y REGLAS DE TOKENIZACION CON COMILLAS. 
					→ "ls" == ls 		→ ✅ FUNCIONA: se ejecuta y se comporta igual que ls sin comillas
					→ 'env' == env 		→ ✅ FUNCIONA: se ejecuta y se comporta igual que env sin comillas	
					→ "touch"			→ ✅ FUNCIONA: se tokeniza como comando pero falla al no encontrar el argumento de su patron: command + file_operand
				→ si el argumento no es valido → ❌ BASH_ERROR
					→ ls "-l -1"
				→ Excepciones:
					→ linea vacia: <espacio><espacio><ENTER> → No hay tokens, así que no hay comando. Bash simplemente muestra un nuevo prompt sin ejecutar nada.

			✔ Las comillas permiten que los argumentos con espacios se traten como un solo token y anulan los separadores

			✔ comillas abiertas 
				→ patron comando es el primer token: lo mismo para ' y "
					→ |' y &&' y &' y ||' y |&'  → espera un comando antes del separador especial 		→ ❌ BASH_ERROR
					→ | algo " 																			→ ❌ BASH_ERROR
					→ '| y '&& y '|| 																	→ ❌ SINTAX_ERROR → comillas ebiertas
					→ >|' y '>|	y '$| y $|'																→ ❌ SINTAX_ERROR → comillas ebiertas
				→ patron redireccion: lo mismo para ' y "
					→ <' y >' y '< y '>  y lo mismo con >> y << 		→ ❌ SINTAX_ERROR → comillas ebiertas
					→ ls >' test.txt									→ ❌ SINTAX_ERROR → comillas ebiertas
					→ ls >" test.txt									→ ❌ SINTAX_ERROR → comillas ebiertas
					→ << 'LIMITER y << LIMITER '						→ ❌ SINTAX_ERROR → comillas ebiertas
				→ pipe "abierto" como comillas abiertas:
					→ echo hola |

			✔ comillas CERRADAS dentro de un potencial comando:
				→ ech"o" hola 		→ ✅ FUNCIONA: → tokeniza echo como comando y hola como argumento, el separador es espacio sin comillas
				→ echo"ho"la 		→ ❌ BASH_ERROR: → echohola: command not found  → tokeniza todo y lo manda como command, no hay separador
				→ echo "ho"la 		→ ✅ FUNCIONA: → tokeniza echo como command y hola como argument, el separador es espacio sin comillas
				→ echo"ho "la 		→ ❌ BASH_ERROR: → echoho la: command not found  → no hay espacio sin comillas como separador y se tokeniza todo, espacio encomillado incluido
				→ echo"ho " la 		→ ❌ BASH_ERROR: → echoho : command not found  → tokeniza command hasta el espacio sin comillas

			✔ Si no hay un espacio entre las comillas, el shell las concatena sin separarlas.  
				❌ ERROR: "ls""-l""-1"|"wc""-l" → ["ls-l-1", "|", "wc-l"]
				✅ FUNCIONA:   "ls" "-l" -1|"wc" -l ["ls", "-l", "|", "wc", "-l"]
			✔ Todo lo que sigue después del comando se considera argumento, hasta que aparezca un separador (|, ;, &&, ||, etc.).
				1. si metemos un separador entre comillas bash no quita las comillas y no interpretara ese separados como "separador", como pasa con los comandos y argumentos. 
			✔ Si un comando o argumento queda mal formado después de la expansión de comillas, el shell lo trata como un único token no válido.
			✔ Las comillas también pueden ser manipuladas mediante el carácter de escape (\).
			✔ La expancion de variables se define con " o ' y se puede anular con \:  (ver mas detalles abajo: expancion de variables). Hay que tenerlo en cuenta a la hora de quitar las comilals de las variebles y tokenizar $VAR "limpia"
				'$VAR' 		→ no se expande
				"$VAR" 		→ se expande
				"\$VAR" 	→ no se expande

				1. Comillas y espacios combinados: si un argumento tiene espacios pero está rodeado por comillas, el shell lo considera como una única palabra.
					→ "ls -l" 	 		→ ❌ BASH_ERROR:: se ejecuta como comando y se comporta: ls -l: command not found
					→ "ls " 	 		→ ❌ BASH_ERROR: se ejecuta como comando y se comporta: Command 'ls ' not found, did you mean: ...

				2. Comillas dobles ("): Lo que está dentro se trata como un "único argumento" (vex explicaion anterior sobre comando o arguemnto entre comillas), respetando espacios, pero las variables y los comandos dentro se expanden. Ejemplo: "ls -l".
					
					'mi nombre es $USER' → se clasificara como comando sin expancion	→ mi nombre es \$USER: command not found
					"mi nombre es $USER" → se clasificara como comando con expancion	→ mi nombre es mzolotar: command not found

				3. Comillas simples ('): Todo dentro de las comillas simples es tratado literalmente, sin expansión de variables o comandos.

					"$USER" → "entre comillas" se clasificara como comando con expanción		→ $USER se expande  			→	 mzolotar: command not found
					$USER  →  se clasificara como comando con expanción							→ $USER se expande  			→	 mzolotar: command not found
					'$USER' → 'entre comillas' se clasificara como comando con expanción		→ $USER no se expande  			→	 $USER: command not found
				
				4. Comillas dentro de comillas: El carácter de escape (\) permite que las comillas dobles dentro de la cadena sean parte del texto, no un delimitador.
					echo "mi nombre es \$USER" → "entre comillas" se clasificara como argumento de echo	→ $USER no se expandira por \ 			→	mi nombre es $USER
					echo "mi nombre es $USER"  → "entre comillas" se clasificara como argumento de echo	→ $USER se expandira por " 				→	mi nombre es mzolotar
					echo 'mi nombre es \$USER' → "entre comillas" se clasificara como argumento de echo	→ $USER no se expandira por '   		→	mi nombre es \$USER

					si no tenemos echo $USER se considerara como comando y seguiras el mismo patron de expancion que se ejemplifica antes. 

	🔸 3. Identificación de operadores especiales (primero el mas largo y luego los unitarios: <<<, <<, < o ||, |).
		1. Si el shell encuentra estos operadores juntos (|| o &&), los trata como un solo token, a menos que haya un separador forzado. 
		Si estan sin separar por un espacio o comillas o separadores, shell los separa/tokeniza priorizando la regla de revisar operadores de mas largo a mas corto.

			ls|||wc -l	→	["ls", "||", "|", "wc", "-l"].

			Operadores de más de un carácter (||, &&) se reconocen como un solo token automáticamente, de mas largo a mas corto: <<<, << y luego <.
				&&	→ AND lógico → Ejecuta el segundo comando solo si el primero tiene éxito.
				||	→ operador lógico de "OR → Se usa para ejecutar un comando solo si el comando anterior falla, es decir, solo si el primer comando devuelve un código de salida diferente de 0 (lo que indica un error o fallo).
				;;	→ Fin de un caso en case → Marca el final de una opción en una estructura case.
				>>>	→ No válido pero se tokeniza como >> y >.
				<<	→ Here-Document → Redirige múltiples líneas de entrada a un comando.
				<<-	→ Here-Document con eliminación de tabulaciones → Elimina tabulaciones antes de las líneas de entrada en un here-document.
				&>	→ Redirección de salida y error estándar (Bash).

				>|	→ pipe_type_especial
				|&	→ pipe_type_especial
				$|	→ pipe_type_especial

				diferentes tipos de redirecciones ver & combinado, más adelante. 
				
		2. Los operadores especiales (|, >, <, &) siempre se separan como tokens aunque no tengan espacio y aunque vallan a continuacion de operadores especiales. 
				| → Pipe: Redirige la salida estándar de un comando al siguiente comando en la secuencia.
				> → Redirección de salida: Redirige la salida estándar de un comando a un archivo.
					→ ver patrones de como se define lo que va despues de redireccion y como se limitan los arg. 
				< → Redirección de entrada: Redirige la entrada estándar de un archivo a un comando.
					→ ver patrones de como se define lo que va despues de redireccion y como se limitan los arg.
				
				; → Separador de comandos: Permite ejecutar múltiples comandos en la misma línea, uno tras otro.
				& → Ejecutar en segundo plano: Se utiliza para ejecutar un comando en segundo plano.
					el & no se considera un separador de comandos en Bash, pero sí es un operador especial que tiene un significado diferente dependiendo de su contexto.
						→ Cuando usas el & al final de un comando, el comando se ejecuta en segundo plano (asíncrono) → sleep 5 &
						→ Si & aparece junto con otros operadores como && o &>, su significado cambia. Por ejemplo:
							→ && es un operador lógico de "AND" que ejecuta el segundo comando solo si el primero tiene éxito.
							→ &> es un operador de redirección de salida y error estándar.

			ejemplo:
			ls|||wc -l 					❌ BASH_ERROR:
			Tokenización: ["ls", "||", "|", "wc", "-l"]
				ls → Comando
				|| → Operador OR lógico
				| → Pipe (redirige la salida de || a wc, lo cual es incorrecto)
				Error de sintaxis: El operador || no produce salida, por lo que no se puede encadenar con |.
				Resultado: El shell muestra un error de sintaxis -> ❌ BASH_ERROR:

	🔸 4. Agrupación de caracteres entre comillas: Si los caracteres están entre comillas, el shell los agrupa y los trata como un único token.
	🔸 5. Expansión de variables y sustitución de comandos. OJO al menejar tipos de varibles en C. En caso de expandirse habra que ver que tipo de varieble es para almacenarlade forma correcta y usarla despues con tipo correcto. 
			0. localizar la variable:
				→ la varieble sera:
					→ $+primer_char:
						$_
						$a (alfa minusculas)
						$A (alfa mayusculas)
				→ los siguientes caracteres despues de $+[0] -> la variable puede tener:
					→ alfanumericos (alfanum may y min) y barras bajas
				→ la varieble termina si:
					→ no repseta las dos reglas anteriores
					→ hay espacio o caracter no permitido por las dos reglas anteriores
				→ la variable sera ' ' si '$ ' → por las reglas anteriores. y combinaciones varias: $-, $;, $; 
				→ caso en los que la exp de variable o contenido de varieable da ❌ SINTAX_ERROR:  ver expancino de variebles pto. 5.1 Expansión de variables. 
					
			1. varible sin comillas 
				si respeta las reglas anteriores la varieble se espande. 
			2. variable con '
				→ echo '$USER' → no se expande por '
			3. variable con "
				→ echo "$USER" → se expande por "
			4. cosos especiales " '$VAR'" -> ver priodad de comillas. expnacion y mantien una de las comillas en la tokenizacion:
				→ echo "'$USER'" → se expande, mandan las comillas ""					 → 'mzolotar'
				→ echo '"$USER"' → no se expande, mandan las comillas ''				 → "$USER"
		1. Expansión de variables: Las expansiones de variables ocurren cuando se sustituyen las referencias a variables en un comando o expresión con sus valores actuales, Tipos de expanciçon de variebles en BASH:
			0. $? → es una variable especial que almacena el código de salida (exit status) del último comando ejecutado.
				 → Si el valor de $? es 0, significa que el último comando se ejecutó correctamente.
				 → Si el valor de $? es distinto de 0, significa que hubo un error. Los diferentes valores indican distintos tipos de errores.
				 → En Bash, el código de salida almacenado en $? tiene un rango de 0 a 255.
					 → 0 → Indica que el comando se ejecutó con éxito.
					 → 1-255 → Indican diferentes tipos de errores o estados de salida.
					 	 → 1 - Error general
						 → 2 - Uso incorrecto de shell builtins
						 → 126 - Comando encontrado pero no ejecutable
						 → 127 - Comando no encontrado
					 → 256 o valores mayores → Se truncan al rango 0-255 (porque Bash usa un byte para el código de salida).
				 → Para establecer tu propio código de error en Bash, usa el comando exit <código>. Si quieres un código estándar, puedes usar 2 para SYNTAX_ERROR, ya que Bash usa 2 para errores de uso (misuse of shell builtins).
					🔴 Evitar conflictos con códigos de Bash
							 → Valores 1-125 son seguros para errores personalizados.
							 → Valores 126-127 están reservados por Bash:
								 → 126: No tienes permisos para ejecutar un script.
								 → 127: Comando no encontrado.
							 → 128+ están reservados para señales (kill -9 → exit 137).
			1. ✅ Expansión de variables (Variable Expansion): Esto es simplemente la sustitución de una variable por su valor.
				variable="Hola"
				echo $variable
				output: Hola
			2. ✅ Expansión de parámetros (Parameter Expansion):Esto incluye el uso de las variables del entorno, como $HOME, $PATH, etc.
				echo $HOME
				output: /home/user
			3. ❌ Expansión de la variable con el prefijo ${}: Se usa para referirse a variables de una forma más explícita.
				-> (❌ SINTAX_ERROR)
				nombre="Juan"
				echo "Hola ${nombre}"
				output: Hola Juan
			4. ✅  Expansión de comandos: Permite ejecutar un comando dentro de un valor, y sustituir esa parte del comando con su salida.
				-> (❌ SINTAX_ERROR) quitamos las comillas
				echo "La fecha de hoy es: $(date)"
				echo "lista de archivos: $(ls -1)"
				
				✅  CMD_VAR="ls -l"
					-> funcion para expandir las vars
			5. ❌ Expansión aritmética: Se usa para realizar operaciones matemáticas dentro de un comando.
				-> (❌ SINTAX_ERROR)
				echo $((5 + 3))
				output: 8
			6. ❌ Expansión de arreglos: Si usas variables tipo arreglo, puedes expandir sus elementos.
				-> (❌ SINTAX_ERROR)
				array=("uno" "dos" "tres")
				echo ${array[1]}
				output: dos
			7. ✅ Expansión de la tilde (~): Se usa para hacer referencia al directorio home del usuario.
				cd ~ 			→ Te lleva al directorio home del usuario.
			8. ❌ Expansión de comodines (Globbing): Utiliza patrones como *, ?, y [] para coincidir con nombres de archivos en el sistema.
				-> (❌ SINTAX_ERROR)
				ls *.txt			→ Esto lista todos los archivos con la extensión .txt.
				
			
	🔸 6. Expansión de comodines (Globbing: * → (*.txt), ? → (file?.txt), [] → (file[123].txt), {} → (file{1,2,3}.txt)) == wildcards)
		-> (❌ SINTAX_ERROR)
	🔸 7. Reconocimiento de redirecciones (>, <, >>, 2>, etc.)
			→  ✅ <, <<, >, >>
				→ casos con 1 redireccion.
					→ comando + redireccion + path_name:
						→ ls > list.txt
					→ redirección + path_name:
						→ > test.txt
				→ casos con varias redirecciones encadenadas.
					❌ ls > test.txt main.c > test2.txt 				-> command + > + path_name/file_name + argumento de ls + > path_name/file_name: en este caso la segunda resireccion cogera el argumento de ls como texto plano, no como comando
					❌ ls > test.txt main.c > test2.txt  
					✅ ls main.c | tee test.txt test2.txt
			→  ❌ las demas redirecciones 
				-> (❌ SINTAX_ERROR)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

⭐ 2.0 Expansión: Aquí es cuando las variables son sustituidas por sus valores. 
En el paso 2 de tokenización, las expansiones de variables y comandos ocurren antes del parsing (análisis sintáctico). 
Esto asegura que los valores correctos se sustituyan antes de analizar la estructura de los comandos.

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

⭐ 2. Parsing (Análisis Sintáctico): El parser toma la lista de tokens y los agrupa en estructuras según la gramática de Bash.
	🔸 1. Reconoce comandos y argumentos (valiso y no validos por subject_minishell)
		1. El shell examina el primer token después de la tokenización:
			1. Si es un operador especial (|, >, <, <<, ;, &), se trata como un operador y no como un comando. 
			2. Si es una palabra sin comillas ni operadores, el shell intenta encontrar un comando ejecutable con ese nombre. 
			Todo lo que sigue después del primer token es considerado un argumento, hasta que aparece un operador lógico o separador que indique la separación entre comandos. 
			Comandos encadenados: Si hay un operador lógico como &&, ||, ;, etc., el shell lo interpreta como un separador, y lo que sigue después del operador es un nuevo comando, no un argumento.
				1. Cómo el shell verifica si el primer token es un comando? El shell busca el comando en este orden:
					1. Alias: Comprueba si el token es un alias definido por el usuario (alias ll='ls -l').
						-> (❌ SINTAX_ERROR) en fase de tokenización. 
					2. Palabras clave de shell: Comprueba si es un comando interno (if, for, while, echo).
						1. comando interno que va a ❌ SINTAX_ERROR:
							1. if, for, while, etc
							2. 
						2. comando interno que va a ejecucion:
							1. /bin/command
							2. comandos propios: echo, cd, pwd, export, unset, env, exit
					3. Funciones de shell: Comprueba si el usuario definió una función con ese nombre.
						❌ SINTAX_ERROR
					4. Comandos internos (builtins): Verifica si es un comando incorporado en el shell (cd, exit, set).
					5. Comandos en el $PATH	
						1. Busca en los directorios listados en la variable de entorno $PATH.
						2. Si encuentra un binario con ese nombre, lo ejecuta.
						3. Si no lo encuentra, muestra un error
				
		3. Todo lo que viene después del primer comando se considera un argumento, opción, o archivo hasta que aparece un operador especial.
		4. Casos especiales: Ambigüedades y prefijos
			1. Comando con el mismo nombre que un archivo:
			2. Uso de rutas relativas o absolutas:
			3. Uso de command, builtin, y type para verificar comandos:
	🔸 2. Construye estructuras sintácticas
	🔸 3. Detecta redirecciones
	🔸 4. Manejo de subprocesos y agrupaciones
	🔸 5. Sustitución de comandos ($(cmd), `cmd`) -> echo "Hoy es $(date)"


#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

⭐ 4. Expansión (Expansion Phase)
	🔸 1. Expansión de variables
	🔸 2. Expansión de comandos
	🔸 3. Expansión de aritmética
	🔸 4. Expansión de comodines (Globbing)
	🔸 5. Expansión de tilde (~)
	🔸 6. Expansión de separación de palabras (IFS)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
⭐ 5. ❌ SINTAX_ERROR de los token "limpios":
	1. Ver si hay operadores no autorizados por subject y que NO van a ir a ejecucion	 -> ❌ SINTAX_ERROR
		1. siga o no siga el patron de BASH [algo] [not_allow_aoperator] [algo] 		-> ❌ SINTAX_ERROR
		2. token tiene metachar_not_allow 												-> ❌ SINTAX_ERROR
		3. token tiene not_allow_bracket (ver variebles) 								-> ❌ SINTAX_ERROR
		4. \ en expancion de var y \ en general -> revisar esta parte
		5. 
		6. 
	2. ver si hay operadores no autorizados que en teoria tiran ❌ BASH_ERROR pero lo paramos en ❌ SINTAX_ERROR
		1. 
		2. 
		3. 
	3. ver si hay operadores no autorizados pero deben ir a ejecucion para tirar ❌ BASH_ERROR. 
		1. 
		2. 
		3.
		4. 
		5. 

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
⭐ 6. Ejecución del Comando
		🔸 1. Determina el tipo de comando
				1. Comando interno: ejecutado por Bash (ej. cd, echo, export).
				2. Comando externo: busca en $PATH y ejecuta el binario correspondiente.
		🔸 2. Crea un proceso (si es necesario)
		🔸 3. Manejo de redirecciones
		🔸 4. Espera la finalización del comando


#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

⭐ 7. Manejo del Estado de Salida


#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

⭐ 8. Guarda el comando en el historial:

	VER LOS COMANDOS QUE SE GUARGAN O NO EN EL HISTORIAL
	VER COMO SE SOBREESCRIBE EN EL HISTORIAL
	🔸 1. 
	🔸 2.

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

⭐ 9. Muestra el nuevo prompt (PS1) → Espera la siguiente entrada.


#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•##•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•##•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

//#➵⤐──╌╌➣⋆➣╌─⤏➵•➵⤐──╌╌➣⋆➣╌╌── DEFENSA: ──╌╌➣⋆➣╌╌⤏➵•➵⤐──╌╌➣⋆➣╌╌➔#

1. ver hoja DEFENSA
2. 2 heredoc seguidos
3. echo "hello from file 4" >file1 >file2 > file3 >>file4 | cat <<eof << "end " <file4	
4. Prueba todos los posibles syntax error como comillas abiertas, pipe al inicio o al final etc
5. Haz carpetas dentro de carpetas y muévete dentro, que estés 

~/carpeta1/carpeta2/carpeta3

Borra la 1
rm -r ../../../carpeta1

Haz pwd
Luego cd..

#•❅──────✧❅✦❅✧──────❅••❅──❅•TOKENIZACION comando defensa•❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

coamndo de defensa: echo "hello from file 4" >file1 >file2 > file3 >>file4 | cat <<eof << "end " <file4	


echo "hello from file 4" >file1 >file2 > file3 >>file4

📌 Paso 1: Tokenización
→ echo						→ Comando
→ "hello from file 4"		→ Argumento del comando
→ >							→ Redirección de salida
→ file1						→ Archivo de salida
→ >							→ Redirección de salida
→ file2						→ Archivo de salida
→ >							→ Redirección de salida
→ file3						→ Archivo de salida
→ >>						→ Redirección de salida en modo append
→ file4						→ Archivo de salida

📌 Paso 2: Interpretación en Bash
		1. echo "hello from file 4" genera la salida estándar:

			hello from file 4

		2. Redirecciones en orden:
			> file1 crea (o vacía si ya existe) file1, pero la salida aún no se escribe.
			> file2 redirige la salida a file2, sobrescribiendo file1.
			> file3 redirige la salida a file3, sobrescribiendo file2.
			>> file4 redirige la salida a file4 en modo append (se añade al final del archivo sin sobrescribirlo).

		3. La salida final ("hello from file 4") se escribe en file3 y file4.


📌 ¿Qué sucede con los archivos?
→  file1, file2 y file3 se crean, pero solo file3 recibe el texto.
→  file4 mantiene su contenido previo y añade "hello from file 4" al final.
→  file1 y file2 estarán vacíos porque las redirecciones sucesivas los sobreescriben, pero nunca reciben datos

✅ Conclusión:
→  Bash sigue la redirección de derecha a izquierda.
→  Solo el último archivo (file3) recibe la salida estándar, antes de que se duplique en file4.

🔹 Si quieres escribir en todos los archivos al mismo tiempo, usa tee: 
	echo "hello from file 4" | tee file1 file2 file3 file4

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•##•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•##•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#


//#➵⤐──╌╌➣⋆➣╌─⤏➵•➵⤐──╌╌➣⋆➣╌╌── TOKENIZACION DE COMANDOS: ──╌╌➣⋆➣╌╌⤏➵•➵⤐──╌╌➣⋆➣╌╌➔#

1. cd ..

Tokens:
cd (command)
.. (argument)
#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

2. echo Hello, World!

Tokens:
echo (command)
Hello, (argument)
World! (argument)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
3.1 echo "This is a 'test'"

Tokens:
echo (comando)
"This is a 'test'" (argumento, tratado como una sola unidad debido a las comillas dobles)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
3.2 echo 'This is a "test"'

Tokens:
echo (comando)
'This is a "test"' (argumento, tratado como una sola unidad debido a las comillas simples)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
4.1 echo 'Hello $USER'

Tokens:
echo (comando)
'Hello $USER' (argumento, sin expansión de $USER porque está entre comillas simples)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
4.2 echo "Hello $USER"

Tokens: 
echo (comando)
"Hello $USER" (argumento, $USER se expandirá porque está entre comillas dobles)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

4.3  VAR="world"
Tokens:
VAR="world" → Asignación de variable (un solo token, sin separación)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
4.4 VAR="hello world"

Tokens:
VAR="hello world" (un solo token, incluyendo el espacio dentro de las comillas)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
5. 
VAR="world"
echo "Hello $VAR"   
echo 'Hello $VAR'

Comando: VAR="world"
Tokens: VAR=world (asignación de variable, sin espacios alrededor del =)

Comando: echo "Hello $VAR"
Tokens:
echo (comando)
"Hello $VAR" (argumento, $VAR se expandirá)

Comando: echo 'Hello $VAR'
Tokens:
echo (comando)
'Hello $VAR' (argumento, $VAR no se expandirá porque está entre comillas simples)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
5.1

echo "var  $ARG=2" (se expande) -> output: var   2
echo "var  $ARG = 2"  (se expande) -> output: var   = 2
echo 'var  $ARG =2' (no se expande) -> output: var  $ARG =2
echo 'var  $ARG=2' (no se expande) -> output: var  $ARG=2


-Comando: echo "var $ARG=2"

Tokens:
echo (comando)
"var $ARG=2" (argumento, $ARG se expandirá porque está entre comillas dobles)

-Comando: echo "var $ARG = 2"

Tokens:
echo (comando)
"var $ARG = 2" (argumento, $ARG se expandirá porque está entre comillas dobles)


-Comando: echo 'var $ARG =2'

Tokens:
echo (comando)
'var $ARG =2' (argumento, $ARG no se expandirá porque está entre comillas simples)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

5.2 ls -l "$DIR"
Tokens:

ls (comando)
-l (opción)
"$DIR" (argumento, $DIR se expandirá porque está entre comillas dobles)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

5.3 archivo="datos.txt" cat "$archivo"

Tokens:
archivo="datos.txt" (asignación de variable, archivo se establecerá en "datos.txt")
cat (comando)
"$archivo" (argumento, $archivo se expandirá porque está entre comillas dobles)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

5.4 echo "Hola $USER"

Tokens:
echo (comando)
"Hola $USER" (argumento, $USER se expandirá porque está entre comillas dobles)


#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

5.5 nombre="Carlos"

Tokens:
nombre="Carlos" (asignación de variable, nombre se establecerá en "Carlos")

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

5.6 grep "$PATTERN" file.txt

Tokens:
grep (comando)
"$PATTERN" (argumento, $PATTERN se expandirá)
file.txt (argumento)


#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

5.7 cat $FILE

Tokens:
cat (comando)
$FILE (argumento, se expandirá al valor de la variable)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

5.8 mv "$SRC" "$DEST"

Tokens:
mv (comando)
"$SRC" (argumento, $SRC se expandirá)
"$DEST" (argumento, $DEST se expandirá)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

5.9 export PATH="$HOME/bin:$PATH"

Tokens:
export (comando)
PATH="$HOME/bin:$PATH" (asignación de variable, $HOME y $PATH se expandirán)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

9.10 touch "$FILENAME"

Tokens:
touch (comando)
"$FILENAME" (argumento, $FILENAME se expandirá)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
 9.11 echo "$USER is logged in"

Tokens:
echo (comando)
"$USER is logged in" (argumento, $USER se expandirá)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

9.12 cp "$SOURCE" "$TARGET"

Tokens:
cp (comando)
"$SOURCE" (argumento, $SOURCE se expandirá)
"$TARGET" (argumento, $TARGET se expandirá)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

9.13 find . -name "$PATTERN"

Tokens:
find (comando)
. (argumento)
-name (opción)
"$PATTERN" (argumento, $PATTERN se expandirá)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
6. echo "Hello, world!" > "output file.txt"

Tokens:
echo (comando)
"Hello, world!" (argumento)
> (operador de redirección)
"output file.txt" (archivo de salida, tratado como un solo token debido a las comillas)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
7. cat testfile.txt | grep "pattern" | wc -l > count.txt

Tokens:
cat (command)
testfile.txt (argument)
| (pipe)
grep (command)
"pattern" (argument, treated as a single token due to quotes)
| (pipe)
wc (command)
-l (argument)
> (redirection operator)
count.txt (file for redirection)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
8. echo "Hello World" | tr ' ' '\n' | sort

Tokens:
echo (command)
"Hello World" (argument, treated as a single token due to quotes)
| (pipe)
tr (command)
' ' (argument, single-quoted space)
'\n' (argument, single-quoted newline)
| (pipe)
sort (command)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#
9. ls | grep .txt | xargs wc -l

Tokens:
ls (command)
| (pipe)
grep (command)
.txt (argument)
| (pipe)
xargs (command)
wc (command)
-l (argument)


#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#


10. Comando: echo "He said: \"Hello!\""

Tokens:
echo (command)
"He said: \"Hello!\"" (argument, las comillas dobles permiten la expansión de variables y caracteres especiales escapados con \)

Outut shell:

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

10.1. Comando: echo 'He said: "Hello!"'

Tokens:
echo (command)
'He said: "Hello!"' (argument, las comillas simples preservan todo el contenido literal, sin expansión de variables ni caracteres especiales)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

10.2 Comando: echo 'He said: \'Hello!\''

Tokens:
echo (command)
❌ Error de sintaxis, porque dentro de comillas simples '...' no se puede usar \' para escapar otra comilla simple.
Corrección válida: echo 'He said: '"'"'Hello!'"'"'
Tokens corregidos:
echo (command)
'He said: ' (argument, primera parte de la cadena en comillas simples)
'"'"' (argument, comilla simple dentro de comillas dobles para permitir la inclusión de ')
'Hello!' (argument, segunda parte de la cadena en comillas simples)


#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

11.0 echo "|"

Tokens:
echo (command)
| (argument)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

11.1 echo '|'

Tokens:
echo (command)
| (argument)


#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

11.2 ls | grep .txt 

Tokens:
ls (command)
| (pipe)
grep (command)
.txt (argument)

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

11.3 ls "|" grep .txt y ls '|' grep .txt

ls (command)
| (argument)

ls: cannot access '|': No such file or directory 
ls: cannot access 'grep': No such file or directory
ls: cannot access '.txt': No such file or directory

#•❅──────✧❅✦❅✧──────❅••❅──❅••❅──✧❅✦❅✧──────✧❅✦❅✧─────❅•#

11.4 

echo \n         -> n
echo "\n"       -> \n
echo '\n'       -> \n



