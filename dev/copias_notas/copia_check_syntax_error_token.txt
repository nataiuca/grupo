# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    copia_check_syntax_error_token.txt                 :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: mzolotar <mzolotar@student.42madrid.com    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/03/05 11:22:55 by mzolotar          #+#    #+#              #
#    Updated: 2025/05/26 21:07:07 by mzolotar         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#include "minishell.h"

bool	is_problematic_redir_pattern(t_tokens *tokens)
{
	t_tokens	*next_next_token;

	if (!tokens->next || tokens->next->type != redir_l_d)
		return (false);

	next_next_token = ft_find_node_n_position(tokens, tokens->position + 2);
	if (!next_next_token)
		return (false);

	if (is_redir(tokens) && next_next_token->type == heredoc_delimiter)
	{
		printf("%s: `%s'\n", ERR_BASH, tokens->next->content);
		return (true);
	}
	return (false);
}

bool	is_pipe_heredoc_at_start(t_tokens *tokens)
{
	t_tokens	*next_next_token;

	if (tokens->type != pipe_type || tokens->position != 0)
		return (false);

	if (!tokens->next || tokens->next->type != redir_l_d)
		return (false);

	next_next_token = ft_find_node_n_position(tokens, tokens->position + 2);
	if (next_next_token && next_next_token->type == heredoc_delimiter)
	{
		printf("%s: `%s'\n", ERR_BASH, tokens->content);
		return (true);
	}
	return (false);
}

// true - bash error antes de here-doc y reiniciamos line
// false -otro
// casos:
// n + redir + here + delimiter
// 0 + | + here + delimiter
bool	check_bash_before_here(t_tokens *tokens)
{
	t_tokens	*last_token;

	last_token = find_last_node(tokens);
	while (tokens)
	{
		if ((is_redir(tokens) || tokens->type == pipe_type)
			&& last_token && last_token->position > 1)
		{
			if (is_problematic_redir_pattern(tokens))
				return (true);
			if (is_pipe_heredoc_at_start(tokens))
				return (true);
		}
		tokens = tokens->next;
	}
	return (false);
}



/*
bool	check_bash_before_here(t_tokens *tokens)
{
	t_tokens	*next_next_token;
	t_tokens	*last_token;

	next_next_token = NULL;
	last_token = find_last_node(tokens);
	while (tokens)
	{
		if ((is_redir(tokens) || tokens->type == pipe_type) && last_token
			&& last_token->position > 1)
		{
			if (tokens->next && tokens->next->type == redir_l_d)
			{
				next_next_token = ft_find_node_n_position(tokens,
						tokens->position + 2);
				if (next_next_token && is_redir(tokens)
					&& (tokens->next->type == redir_l_d)
					&& (next_next_token->type == heredoc_delimiter))
				{
					return (printf("%s: `%s'\n", ERR_BASH,
							tokens->next->content), true);
				}
				else if ((tokens->type == pipe_type) && tokens->position == 0
					&& (tokens->next->type == redir_l_d)
					&& (next_next_token->type == heredoc_delimiter))
				{
					return (printf("%s: `%s'\n", ERR_BASH, tokens->content),
						true);
				}
			}
		}
		tokens = tokens->next;
	}
	return (false);
}
	*/

/**
 * @brief
 *
 * @param
 * @return
 */
bool	check_bash_pipe_before_here(t_tokens *tokens)
{
	t_tokens	*prev_token;

	if (tokens && tokens->type == pipe_type)
		return (printf("%s: `%s'\n", ERR_BASH, tokens->content), true);
	while (tokens)
	{
		prev_token = ft_find_node_n_position(tokens, tokens->position - 1);
		if (prev_token && prev_token->type == heredoc_delimiter)
		{
			tokens = tokens->next;
			continue ;
		}
		if (prev_token && tokens->type == pipe_type && (!tokens->next))
		{
			tokens = tokens->next;
			continue ;
		}
		if (prev_token && tokens->type == pipe_type && (!tokens->next
				|| tokens->next->type == pipe_type))
		{
			return (printf("%s: `%s'\n", ERR_BASH, tokens->content), true);
		}
		tokens = tokens->next;
	}
	return (false);
}

/**
 * @brief
 *
 * @param
 * @return
 */
bool	check_open_pipe_token(t_tokens *tokens)
{
	t_tokens	*current;
	t_tokens	*prew_token;

	current = tokens;
	while (current)
	{
		if (current->position > 0 && current->type == pipe_type)
		{
			prew_token = ft_find_node_n_position(tokens, current->position - 1);
			if (current->type == pipe_type && !current->next
				&& (prew_token->type == command || prew_token->type == argument
					|| prew_token->type == heredoc_delimiter))
			{
				return (printf(ERR_OPEN_PIPE), true);
			}
		}
		current = current->next;
	}
	return (false);
}

/**
 * @brief
 *
 * @param
 * @return
 */
bool	check_bash_error_token(t_tokens *tokens)
{
	t_tokens	*next_token;
	t_tokens	*current;

	current = tokens;
	while (current)
	{
		next_token = current->next;
		if (is_redir(current) && next_token && is_redir(next_token))
		{
			return (printf("%s: `%s'\n", ERR_BASH, next_token->content), true);
		}
		if (current->type == pipe_type && next_token
			&& next_token->type == pipe_type)
		{
			return (printf("%s: `%s'\n", ERR_BASH, next_token->content), true);
		}
		current = next_token;
	}
	return (false);
}

/**
 * @brief
 *
 * @param
 * @return
 */
bool	check_bash_after_here(t_tokens *tokens)
{
	t_tokens	*next_token;
	t_tokens	*current;

	current = tokens;
	while (current)
	{
		next_token = current->next;
		if (is_redir(current) && (!next_token))
		{
			return (printf("%s: `newline'\n", ERR_BASH), true);
		}
		if (is_redir(current) && (next_token) && next_token->type == pipe_type)
		{
			return (printf("%s: `%s'\n", ERR_BASH, next_token->content), true);
		}
		current = next_token;
	}
	return (false);
}

/**
 * @brief
 *
 * @param
 * @return
 */
bool	check_bash_pipe_error(t_tokens *tokens, t_program *program)
{
	if (check_bash_pipe_before_here(tokens) || check_bash_before_here(tokens)
		|| check_bash_error_token(tokens))
	{
		program->last_exit_status = 2;
		return (false);
	}
	if (check_open_pipe_token(tokens) == true)
	{
		program->last_exit_status = 1;
		return (false);
	}
	if (check_bash_after_here(tokens) == true)
	{
		program->last_exit_status = 2;
		return (false);
	}
	return (true);
}
